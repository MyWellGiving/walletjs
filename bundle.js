!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e((t="undefined"!=typeof globalThis?globalThis:t||self).walletjs={})}(this,(function(t){"use strict";class e{constructor(t,e,n,o,a){this.key=t||null,this.payment=e||null,this.details=n||null,this.options=o||null,this.domain=a||null}validate(){for(const[t,e]of Object.entries(this))if(null===e)throw new Error(`missing required parameter - ${t}`)}mapToPaymentRequest(){return new PaymentRequest([{supportedMethods:"https://apple.com/apple-pay",data:this.payment}],this.details,this.options)}}const n={submit:async function(t,n,o,a,s){try{const l=new e(t,n,o,a,s);l.validate();const d=l.mapToPaymentRequest();d.onmerchantvalidation=async e=>{const o=`https://${s}/api/public/applepay/validatemerchant`;await fetch(o,{method:"post",headers:{"content-type":"application/json"},body:JSON.stringify({PKeyCompany:t,AppleMerchantId:n.merchantIdentifier,ValidationUrl:e.validationURL})}).then((t=>t.json())).then((t=>e.complete(t))).catch((t=>e.complete(t)))};var i=await d.show(),r=null;const c=`https://${s}/api/public/applepay/paymentauthorized`;return await fetch(c,{method:"post",headers:{"content-type":"application/json"},body:JSON.stringify({PKeyCompany:t,AppleMerchantId:n.merchantIdentifier,ApplePayPayment:i.details})}).then((t=>t.json())).then((t=>{i.complete("success"),r=t})).catch((t=>{throw i.complete("fail"),new Error(t)})),{status:"success",token:r}}catch(t){return{status:"fail",error:t.message}}}};t.GooglePay=class{constructor(t){this.domReady((()=>{let e;if(this.validate(t),this.settings=t,this.paymentsClient=null,"string"==typeof t.container){const n=t.container;e=document.querySelector(n)}else e=t.container;this.settings.container=e,this.gpSettings={baseRequest:{apiVersion:2,apiVersionMinor:0},tokenizationSpecification:{type:"PAYMENT_GATEWAY",parameters:{gateway:"fluidpay",gatewayMerchantId:this.settings.gatewayMerchantId}}},this.gpSettings.baseCardPaymentMethod={type:"CARD",parameters:{allowedAuthMethods:this.settings.allowedCardAuthMethods,allowedCardNetworks:this.settings.allowedCardNetworks}},this.gpSettings.cardPaymentMethod=Object.assign({},this.gpSettings.baseCardPaymentMethod,{tokenizationSpecification:this.gpSettings.tokenizationSpecification}),this.loadGooglePayJSFile()}))}domReady(t){"interactive"===document.readyState||"complete"===document.readyState?t():document.addEventListener("DOMContentLoaded",t)}loadGooglePayJSFile(){let t=document.createElement("script");t.src="https://pay.google.com/gp/p/js/pay.js",t.onload=this.onGooglePayLoaded.bind(this),document.head.appendChild(t)}validate(t){let e;if("string"==typeof t.container){const n=t.container;e=document.querySelector(n)}else e=t.container;if(!e)throw new Error("Could not find container");let n=[];for(const e of t.allowedCardNetworks){if("AMEX"!==e&&"DISCOVER"!==e&&"INTERAC"!==e&&"JCB"!==e&&"MASTERCARD"!==e&&"VISA"!==e)throw new Error("Invalid card network in allowedCardNetworks");if(-1!==n.indexOf(e))throw new Error("Duplicate value found in allowedCardNetworks");n.push(e)}let o=[];for(const e of t.allowedCardAuthMethods){if("PAN_ONLY"!==e&&"CRYPTOGRAM_3DS"!==e)throw new Error("Invalid authentication method in allowedCardAuthMethods");if(-1!==o.indexOf(e))throw new Error("Duplicate value found in allowedCardAuthMethods");o.push(e)}}getGoogleIsReadyToPayRequest(){return Object.assign({},this.gpSettings.baseRequest,{allowedPaymentMethods:[this.gpSettings.baseCardPaymentMethod]})}getGooglePaymentDataRequest(){const t=Object.assign({},this.gpSettings.baseRequest);return t.allowedPaymentMethods=[this.gpSettings.cardPaymentMethod],t.transactionInfo=this.getGoogleTransactionInfo(),t.merchantInfo={merchantName:this.settings.merchantName},t}getGooglePaymentsClient(){return null===this.paymentsClient&&(this.paymentsClient=new google.payments.api.PaymentsClient({environment:"TEST"})),this.paymentsClient}onGooglePayLoaded(){this.getGooglePaymentsClient().isReadyToPay(this.getGoogleIsReadyToPayRequest()).then((t=>{t.result&&this.addGooglePayButton()})).catch((t=>{console.error(t)}))}addGooglePayButton(){const t=this.getGooglePaymentsClient().createButton({onClick:this.onGooglePaymentButtonClicked.bind(this)});this.settings.container.appendChild(t)}getGoogleTransactionInfo(){return{countryCode:this.settings.transactionInfo.countryCode,currencyCode:this.settings.transactionInfo.currencyCode,totalPriceStatus:"FINAL",totalPrice:this.settings.transactionInfo.totalPrice}}onGooglePaymentButtonClicked(){const t=this.getGooglePaymentDataRequest();t.transactionInfo=this.getGoogleTransactionInfo();this.getGooglePaymentsClient().loadPaymentData(t).then((t=>{this.settings.onPaymentSuccess(t)})).catch((t=>{this.settings.onPaymentError(t)}))}},t.applepay=n,Object.defineProperty(t,"__esModule",{value:!0})}));
